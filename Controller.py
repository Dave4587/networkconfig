#	networkconfig - Generator for home router configuration and networks
#	Copyright (C) 2012-2019 Johannes Bauer
#
#	This file is part of networkconfig.
#
#	networkconfig is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	networkconfig is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with networkconfig; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import time

import mako.template, mako.exceptions
from mako.lookup import TemplateLookup

class _Template():
	def __init__(self, filename):
		self._template = mako.lookup.Template(open(filename, "r").read())

	def render(self, parameters):
		assert(isinstance(parameters, dict))
		try:
			renderresult = self._template.render(**parameters)
		except:
			print("Templating error, cannot continue. Mako-decoded stacktrace follows:")
			print(mako.exceptions.text_error_template().render())
			sys.exit(1)

		return renderresult

class Controller():
	def __init__(self, generatorname, data, cmdlineargs):
		self._generatorname = generatorname
		self._data = data
		self._cmdlineargs = cmdlineargs

	def getnetworks(self):
		return self._data["networks"]

	def gethosts(self):
		return self._data["hosts"]

	# Keyword arguments
	# data (dict)
	# perms (permissions as int, default 0o644)
	# usergrp (user/group as string, defaults "root:root")
	def instanciate(self, templatename, destfilename, **kwargs):
		perms = kwargs.get("perms", 0o644)
		usergrp = kwargs.get("usergrp", "root:root")
		print("%s: Creating %s from %s -> %s with %o perms" % (self._generatorname, destfilename, templatename, usergrp, perms))

		# Some templates have special data
		renderdata = kwargs.get("data", { })

		infolines = [
			destfilename,
			"Automatically generated by module %s of ServerConfig on %s." % (self._generatorname, time.strftime("%Y-%m-%d %H:%M:%S")),
			"DO NOT CHANGE MANUALLY. All changes will be overwritten.",
		]

		# But these are available in every script
		renderdata.update({
			"hosts":		self._data["hosts"],
			"networks":		self._data["networks"],
			"geninfo":		infolines,
		})

		template = _Template(self._cmdlineargs.gendir + self._generatorname + "/" + templatename)
		result = template.render(renderdata)

		outfilename = self._cmdlineargs.outdir + destfilename
		outdir = os.path.dirname(outfilename)
		try:
			os.makedirs(outdir)
		except OSError:
			pass

		open(outfilename, "w").write(result)
